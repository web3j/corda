buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.adarshr:gradle-test-logger-plugin:1.7.0'
        classpath 'gradle.plugin.com.github.breadmoirai:github-release:2.2.9'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

plugins {
    id 'com.diffplug.gradle.spotless' version '3.25.0'
}

description = 'Web3j integration with the Corda blockchain platform.'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.adarshr.test-logger'

    apply from: "$rootProject.projectDir/gradle/versions.gradle"
    apply from: "$rootProject.projectDir/gradle/repositories.gradle"

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        reports.html.enabled = false
//        jacoco {
//            destinationFile = file("$buildDir/jacoco/${name}.exec")
//            excludes = ['org.gradle.*']
//        }
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }

    configurations {
        testOutput.extendsFrom(testCompile)
        integrationTestOutput.extendsFrom(integrationTestCompile)
    }

    integrationTestJar {
        archiveClassifier.set('integration-test')
    }
    
    task integrationTestSourcesJar(type: Jar) {
        from sourceSets.integrationTest.allSource
        archiveClassifier.set('integration-test-sources')
    }
    
    jacoco {
        toolVersion = versions.jacoco
    }

    jacocoTestReport {
        reports {
            csv.enabled false
            xml.enabled false
            html.enabled true
        }
        afterEvaluate {
            // FIXME [ant:jacocoReport] Classes in bundle 'web3j-corda-console' do no match with execution data. 
            //  For report generation the same class files must be used as at runtime.
            // [ant:jacocoReport] Execution data for class org/gradle/wrapper/WrapperExecutor does not match.
            classDirectories.from files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'org/gradle/**')
            })
        }
    }

//    task jacocoIntegrationTestReport(type: JacocoReport, group: 'verification') {
//        executionData integrationTest
//        sourceSets sourceSets.main
//        reports {
//            csv.enabled false
//            xml.enabled false
//            html.enabled true
//        }
//    }

    artifacts {
        archives sourcesJar
        archives integrationTestSourcesJar
        testOutput testJar
        integrationTestOutput integrationTestJar
    }

    testlogger {
        showSimpleNames true
        showStandardStreams true
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-noarg'
        implementation 'org.jetbrains.kotlin:kotlin-native-utils'

        implementation("org.jetbrains:annotations:${versions.annotations}") { force = true }

        implementation("ch.qos.logback:logback-classic:${versions.logback}") { force = true }
        implementation("org.slf4j:slf4j-api:${versions.slf4j}") { force = true }
        implementation("org.slf4j:slf4j-ext:${versions.slf4j}") { force = true }
        implementation("org.slf4j:jcl-over-slf4j:${versions.slf4j}") { force = true }
        implementation("org.slf4j:jul-to-slf4j:${versions.slf4j}") { force = true }

        configurations.all {
            resolutionStrategy {
                force(group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', version: versions.kotlin)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson)
                force(group: 'com.google.errorprone', name: 'error_prone_annotations', version: versions.errorProneAnnotations)
                force(group: 'com.google.guava', name: 'guava', version: versions.guava)
                force(group: 'commons-io', name: 'commons-io', version: versions.commonsIo)
                force(group: 'io.github.classgraph', name: 'classgraph', version: versions.classgraph)
                force(group: 'io.swagger.core.v3', name: 'swagger-annotations', version: versions.swagger3)
                force(group: 'io.swagger.core.v3', name: 'swagger-core', version: versions.swagger3)
                force(group: 'io.swagger.core.v3', name: 'swagger-models', version: versions.swagger3)
                force(group: 'net.bytebuddy', name: 'byte-buddy', version: versions.byteBuddy)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: versions.jersey)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: versions.jersey)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: versions.jersey)
                force(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: versions.jersey)
                force(group: 'org.glassfish.jersey.ext', name: 'jersey-proxy-client', version: versions.jersey)
                force(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: versions.jersey)
                force(group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: versions.jersey)
            }
        }

        api "io.github.microutils:kotlin-logging:${versions.kLogging}"

        implementation("com.pinterest.ktlint:ktlint-core:${versions.ktlint}") {
            exclude group: 'org.apache.commons'
            exclude group: 'org.apache.httpcomponents'
            exclude group: 'org.slf4j'
        }
        implementation "com.pinterest.ktlint:ktlint-ruleset-standard:${versions.ktlint}"
        implementation "com.pinterest.ktlint:ktlint-ruleset-experimental:${versions.ktlint}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.junit5}"
        testImplementation "com.willowtreeapps.assertk:assertk-jvm:${versions.assertk}"
        testImplementation "junit:junit:${versions.junit4}"
        testImplementation("io.mockk:mockk:${versions.mockk}") {
            exclude group: 'org.jetbrains.kotlin'
        }

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-script-util"

        integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
        integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    compileKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileIntegrationTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility

    spotless {
        kotlin {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/*.kt'
                exclude '**/.gradle/**'
            }
            ktlint(versions.ktlint)
            trimTrailingWhitespace()
            licenseHeaderFile "${rootDir}/gradle/spotless.license"
            endWithNewline()
        }
        java {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/src/*/java/**/*.java'
                exclude '**/.gradle/**'
                exclude '**/generated/**'
            }
            removeUnusedImports()
            googleJavaFormat("1.7").aosp()
            importOrder 'java', '', 'org.web3j', '\\#'
            trimTrailingWhitespace()
            endWithNewline()
            licenseHeaderFile "${rootDir}/gradle/spotless.license"
            paddedCell()
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact integrationTestJar
                artifact integrationTestSourcesJar
                pom {
                    name = project.name
                    afterEvaluate {
                        description = project.description
                    }
                    url = "https://github.com/web3j/corda"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = 'Puneetha17'
                            name = 'Puneetha Karamsetty'
                            email = 'puneetha@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                        developer {
                            id = 'xaviarias'
                            name = 'Xavier Arias'
                            email = 'xavier@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/web3j/corda.git"
                        developerConnection = "scm:git://github.com/web3j/corda.git"
                        url = "https://github.com/web3j/corda.git"
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'snapshots'
                url = 'https://oss.sonatype.org/content/repositories/snapshots'
                mavenContent {
                    snapshotsOnly()
                }
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['maven']
        publish = true
        override = true
        pkg {
            repo = 'maven'
            name = 'org.web3j.corda'
            desc = project.description
            userOrg = 'web3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/web3j/corda/issues'
            vcsUrl = 'https://github.com/web3j/corda.git'
            websiteUrl = 'https://web3j.io'
            publicDownloadNumbers = true
            version {
                gpg {
                    sign = true
                    passphrase = bintrayGpgPassphrase
                }
                mavenCentralSync {
                    sync = true
                    user = ossrhUsername
                    password = ossrhPassword
                    close = '1'
                }
            }
        }
    }
}
