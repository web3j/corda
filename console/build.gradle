import com.github.breadmoirai.githubreleaseplugin.GithubReleaseTask

plugins {
    id 'application'
    id 'distribution'
    id 'com.github.breadmoirai.github-release'
    id 'com.github.johnrengelman.shadow'
}

shadowJar {
    zip64 = true
    append 'gradle-wrapper.jar'
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.web3j.corda.console.CordaCommandMain'
    }
    archiveClassifier = 'all'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    zip64=true
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task createStartScripts(type: CreateStartScripts) {
    outputDir = file('build/sample')
    mainClassName = 'org.web3j.corda.console.CordaCommandMain'
    applicationName = 'web3j-corda'
    classpath = files(customFatJar.archiveFile)
}

distributions {
    custom {
        contents {
            from(customFatJar) {
                into 'lib'
            }
            from(createStartScripts) {
                into 'bin'
            }
        }
    }
}

description = 'Web3j command-line tools for the Corda blockchain platform.'
mainClassName = 'org.web3j.corda.console.CordaCommandMain'
applicationName = 'web3j-corda'

dependencies {
    api project(':web3j-corda-core')
    api project(':web3j-corda-codegen')

    api("javax.annotation:javax.annotation-api:${versions.annotationApi}")

    implementation(group: 'net.corda', name: 'corda-node', version: versions.corda) {
        exclude group: 'com.ea.agentloader'
        exclude group: 'com.github.bft-smart'
        exclude group: 'com.google.jimfs'
        exclude group: 'com.h2database'
        exclude group: 'com.intellij'
        exclude group: 'com.lmax'
        exclude group: 'com.mattbertolini'
        exclude group: 'com.palominolabs.metrics'
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.typesafe'
        exclude group: 'com.zaxxer'
        exclude group: 'com.jcabi'
        exclude group: 'io.atomix.catalyst'
        exclude group: 'io.atomix.copycat'
        exclude group: 'org.apache.activemq'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.apache.shiro'
        exclude group: 'org.hibernate'
        exclude group: 'org.jolokia'
        exclude group: 'org.liquibase'
        exclude group: 'org.postgresql'
        exclude group: 'org.fusesource.jansi'
    }
    implementation(group: 'io.bluebank.braid', name: 'braid-corda', version: versions.braid, changing: true) {
        exclude group: 'io.vertx', module: 'vertx-auth-jwt'
        exclude group: 'io.vertx', module: 'vertx-auth-shiro'
        exclude group: 'io.vertx', module: 'vertx-rx-gen'
        exclude group: 'io.vertx', module: 'vertx-rx-java'
    }

    implementation "info.picocli:picocli:${versions.picocli}"
    implementation "org.gradle:gradle-tooling-api:${versions.gradle}"

    integrationTestImplementation project(path: ':web3j-corda-common', configuration: 'integrationTest')
    integrationTestImplementation project(':web3j-corda-common').sourceSets.integrationTest.output
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        //register an output folder on the main SourceSet:
        output.dir(generatedResources, builtBy: 'generateVersionProperties')
        //it is now a part of the 'main' classpath and will be a part of the jar
    }
    integrationTest {
        kotlin {
            srcDir {
                "$buildDir/generated/src/main/kotlin"
            }
        }
    }
}

task generateCorDappWrappers(type: JavaExec, group: 'web3j') {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.web3j.corda.console.CordaCommandMain'

    args 'generate', '--package-name', 'org.web3j.corda',
            '--cordapps-dir', "$projectDir/src/test/resources/cordapps",
            '--output-dir', "$buildDir/generated"
}

compileIntegrationTestJava {
    mustRunAfter 'compileIntegrationTestKotlin'
}

compileIntegrationTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    dependsOn 'generateCorDappWrappers'
}

task copyIntegrationTestResources(type: Copy) {
    from 'build/resources/test/cordapps'
    into 'build/resources/integrationTest/cordapps'
    dependsOn 'processTestResources'
}

integrationTest {
    dependsOn 'copyIntegrationTestResources'
}

task generateVersionProperties {
    description 'Creates a version.properties file with build info that is added to the root of the jar'
    doLast {
        new File(generatedResources).mkdirs()
        def generated = new File(generatedResources, "version.properties")
        generated.text = "version=$rootProject.version"
    }
}

githubRelease {
    String githubToken = (project.hasProperty('githubToken') ?
            project.property('githubToken') : System.getenv('GITHUB_TOKEN'))

    token githubToken == null ? '' : githubToken

    repo 'corda'
    owner 'web3j'
    overwrite true
    releaseName "v${project.version}"
    draft version.endsWith('SNAPSHOT')
    prerelease version.endsWith('SNAPSHOT')
    releaseAssets = [
            "$buildDir/distributions/$rootProject.name-${version}.zip",
            "$buildDir/distributions/$rootProject.name-${version}.tar"
    ]
}

tasks.withType(GithubReleaseTask) {
    dependsOn 'distZip', 'distTar'
}
