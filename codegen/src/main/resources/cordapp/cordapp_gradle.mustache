buildscript {
    ext {
        web3j_corda_version = '{{web3jCordaVersion}}'
        corda_release_group = 'net.corda'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.45'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'
        corda_platform_version = '4'.toInteger()
        jersey_version = '2.29'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven {
            url 'https://oss.sonatype.org/service/local/repositories/snapshots/content/'
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven {
            url 'https://oss.sonatype.org/service/local/repositories/snapshots/content/'
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

subprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    compileKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility

    dependencies {
        // Kotlin dependencies
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

dependencies {
    // Corda dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies
    cordapp project(":workflows")
    cordapp project(":contracts")

    // Logging dependencies
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // web3j-corda command-line tools dependency
    implementation group: 'org.web3j.corda', name: 'web3j-corda-console', version: web3j_corda_version
}

cordapp {
    info {
        name '{{corDappName}}'
        vendor 'Web3 Labs'
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

task generateCorDappWrappers(type: JavaExec, group: 'web3j') {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.web3j.corda.console.CordaCommandMain'
    
    args 'generate', 
        '--package-name', project.group,
        '--cordapps-dir', "$projectDir",
        '--output-dir', 'clients'
}
